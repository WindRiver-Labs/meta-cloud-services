From bd1a8fc74ac9322384daab94bf5736cae15ecbfe Mon Sep 17 00:00:00 2001
From: Ravishankar N <ravishankar@redhat.com>
Date: Thu, 1 Nov 2018 21:31:41 +0530
Subject: [PATCH] index: prevent arbitrary file creation outside entry-changes
 folder

Problem:
A compromised client can set arbitrary values for the GF_XATTROP_ENTRY_IN_KEY
and GF_XATTROP_ENTRY_OUT_KEY during xattrop fop. These values are
consumed by index as a filename to be created/deleted according to the key.
Thus it is possible to create/delete random files even outside the gluster
volume boundary.

Fix:
Index expects the filename to be a basename, i.e. it must not contain any
pathname components like "/" or "../". Enforce this.

Fixes: CVE-2018-14654

Fixes: bz#1644760
Change-Id: I35f2a39257b5917d17283d0a4f575b92f783f143
Signed-off-by: Ravishankar N <ravishankar@redhat.com>
---
 xlators/features/index/src/index.c |   17 +++++++++++++++++
 1 file changed, 17 insertions(+)

diff --git a/xlators/features/index/src/index.c b/xlators/features/index/src/index.c
index 98dba95..c487e8a 100644
--- a/xlators/features/index/src/index.c
+++ b/xlators/features/index/src/index.c
@@ -830,6 +830,14 @@ index_entry_create (xlator_t *this, inod
                 ctx->state[ENTRY_CHANGES] = IN;
         }
 
+        if (strchr(filename, '/')) {
+            gf_msg(this->name, GF_LOG_ERROR, EINVAL, INDEX_MSG_INDEX_ADD_FAILED,
+                   "Got invalid entry (%s) for pargfid path (%s)", filename,
+                   pgfid_path);
+            op_errno = EINVAL;
+            goto out;
+        }
+    
         op_errno = 0;
 
         snprintf (entry_path, sizeof(entry_path), "%s/%s", pgfid_path,
@@ -864,6 +872,15 @@ index_entry_delete (xlator_t *this, uuid
 
         make_gfid_path (priv->index_basepath, ENTRY_CHANGES_SUBDIR, pgfid,
                         pgfid_path, sizeof (pgfid_path));
+
+        if (strchr(filename, '/')) {
+            gf_msg(this->name, GF_LOG_ERROR, EINVAL, INDEX_MSG_INDEX_DEL_FAILED,
+                   "Got invalid entry (%s) for pargfid path (%s)", filename,
+                   pgfid_path);
+            op_errno = EINVAL;
+            goto out;
+        }
+    
         snprintf (entry_path, sizeof(entry_path), "%s/%s", pgfid_path,
                   filename);
 
-- 
1.7.9.5

