From 74e8328d3f6901d6ba38a313965fe910c8411324 Mon Sep 17 00:00:00 2001
From: Amar Tumballi <amarts@redhat.com>
Date: Thu, 1 Nov 2018 07:25:25 +0530
Subject: [PATCH] all: fix the format string exceptions

Currently, there are possibilities in few places, where a user-controlled
(like filename, program parameter etc) string can be passed as 'fmt' for
printf(), which can lead to segfault, if the user's string contains '%s',
'%d' in it.

While fixing it, makes sense to make the explicit check for such issues
across the codebase, by making the format call properly.

Fixes: CVE-2018-14661

Fixes: bz#1644763
Change-Id: Ib547293f2d9eb618594cbff0df3b9c800e88bde4
Signed-off-by: Amar Tumballi <amarts@redhat.com>
---
 cli/src/cli-cmd-volume.c                           |    2 +-
 libglusterfs/src/client_t.c                        |    7 ++++---
 libglusterfs/src/fd.c                              |    9 +++++----
 libglusterfs/src/inode.c                           |    4 ++--
 libglusterfs/src/iobuf.c                           |   19 ++++++++++---------
 libglusterfs/src/latency.c                         |    2 +-
 libglusterfs/src/logging.h                         |    3 ++-
 libglusterfs/src/mem-pool.h                        |    3 ++-
 libglusterfs/src/run.h                             |    4 ++--
 libglusterfs/src/stack.c                           |    8 ++++----
 libglusterfs/src/statedump.c                       |   13 +++++++------
 libglusterfs/src/statedump.h                       |    6 ++++--
 rpc/rpc-lib/src/rpc-drc.c                          |    4 ++--
 xlators/cluster/afr/src/afr-common.c               |    4 ++--
 xlators/cluster/dht/src/dht-shared.c               |    2 +-
 xlators/cluster/ec/src/ec.c                        |   18 +++++++++---------
 xlators/debug/trace/src/trace.c                    |    4 ++--
 xlators/experimental/jbr-client/src/jbrc.c         |    2 +-
 xlators/features/barrier/src/barrier.c             |    4 ++--
 xlators/features/gfid-access/src/gfid-access.c     |    2 +-
 xlators/features/locks/src/posix.c                 |   10 +++++-----
 xlators/features/quota/src/quota.c                 |    2 +-
 xlators/features/shard/src/shard.c                 |    4 ++--
 xlators/mgmt/glusterd/src/glusterd-quota.c         |    2 +-
 xlators/mgmt/glusterd/src/glusterd-rebalance.c     |    2 +-
 xlators/mgmt/glusterd/src/glusterd-statedump.c     |    2 +-
 xlators/mount/fuse/src/fuse-bridge.c               |    6 +++---
 xlators/performance/io-cache/src/io-cache.c        |   14 +++++++-------
 xlators/performance/io-threads/src/io-threads.c    |    2 +-
 xlators/performance/md-cache/src/md-cache.c        |    2 +-
 xlators/performance/nl-cache/src/nl-cache-helper.c |    6 +++---
 xlators/performance/nl-cache/src/nl-cache.c        |    2 +-
 xlators/performance/open-behind/src/open-behind.c  |    6 +++---
 xlators/performance/quick-read/src/quick-read.c    |   18 ++++++++++--------
 xlators/performance/read-ahead/src/read-ahead.c    |   16 ++++++----------
 .../performance/write-behind/src/write-behind.c    |   12 ++++++------
 xlators/playground/template/src/template.c         |    2 +-
 xlators/protocol/client/src/client.c               |    4 ++--
 xlators/protocol/server/src/server.c               |    2 +-
 xlators/storage/posix/src/posix-common.c           |    6 +++---
 40 files changed, 123 insertions(+), 117 deletions(-)

diff --git a/cli/src/cli-cmd-volume.c b/cli/src/cli-cmd-volume.c
index af2cccc..4b5af6b 100644
--- a/cli/src/cli-cmd-volume.c
+++ b/cli/src/cli-cmd-volume.c
@@ -2804,7 +2804,7 @@ cli_launch_glfs_heal (int heal_op, dict_
                 runner_add_args (&runner, "source-brick", NULL);
                 runner_argprintf (&runner, "%s:%s", hostname, path);
                 if (dict_get_str (options, "file", &filename) == 0)
-                        runner_argprintf (&runner, filename);
+                        runner_argprintf(&runner, "%s", filename);
                 break;
         case GF_SHD_OP_SPLIT_BRAIN_FILES:
                 runner_add_args (&runner, "split-brain-info", NULL);
diff --git a/libglusterfs/src/client_t.c b/libglusterfs/src/client_t.c
index 35e0bed..586cbd8 100644
--- a/libglusterfs/src/client_t.c
+++ b/libglusterfs/src/client_t.c
@@ -585,7 +585,7 @@ client_dump (client_t *client, char *pre
                 return;
 
         memset(key, 0, sizeof key);
-        gf_proc_dump_write("refcount", GF_PRI_ATOMIC,
+        gf_proc_dump_write("refcount", "%" GF_PRI_ATOMIC,
                            GF_ATOMIC_GET (client->count));
 }
 
@@ -632,7 +632,7 @@ clienttable_dump (clienttable_t *clientt
                             clienttable->cliententries[i].next_free) {
                                 gf_proc_dump_build_key(key, prefix,
                                                        "cliententry[%d]", i);
-                                gf_proc_dump_add_section(key);
+                                gf_proc_dump_add_section("%s", key);
                                 cliententry_dump(&clienttable->cliententries[i],
                                                  key);
                         }
@@ -780,7 +780,7 @@ gf_client_dump_fdtables (xlator_t *this)
 
                         gf_proc_dump_build_key (key, "conn", "%d.ref",
                                                         count);
-                        gf_proc_dump_write (key, GF_PRI_ATOMIC,
+                        gf_proc_dump_write (key, "%" GF_PRI_ATOMIC,
                                             GF_ATOMIC_GET (client->count));
                         if (client->bound_xl) {
                                 gf_proc_dump_build_key (key, "conn",
diff --git a/libglusterfs/src/fd.c b/libglusterfs/src/fd.c
index d26b709..6c52131 100644
--- a/libglusterfs/src/fd.c
+++ b/libglusterfs/src/fd.c
@@ -1048,13 +1048,14 @@ fd_dump (fd_t *fd, char *prefix)
                 return;
 
         memset(key, 0, sizeof(key));
-        gf_proc_dump_write("pid", "%llu", fd->pid);
-        gf_proc_dump_write("refcount", "%d", fd->refcount);
+        gf_proc_dump_write("pid", "%" PRIu64, fd->pid);
+        gf_proc_dump_write("refcount", "%" GF_PRI_ATOMIC,
+                           GF_ATOMIC_GET(fd->refcount));
         gf_proc_dump_write("flags", "%d", fd->flags);
 
         if (fd->inode) {
                 gf_proc_dump_build_key (key, "inode", NULL);
-                gf_proc_dump_add_section(key);
+                gf_proc_dump_add_section("%s", key);
                 inode_dump (fd->inode, key);
         }
 
@@ -1102,7 +1103,7 @@ fdtable_dump (fdtable_t *fdtable, char *
                 if (GF_FDENTRY_ALLOCATED ==
                     fdtable->fdentries[i].next_free) {
                         gf_proc_dump_build_key(key, prefix, "fdentry[%d]", i);
-                        gf_proc_dump_add_section(key);
+                        gf_proc_dump_add_section("%s", key);
                         fdentry_dump(&fdtable->fdentries[i], key);
                 }
         }
diff --git a/libglusterfs/src/inode.c b/libglusterfs/src/inode.c
index 538c779..8bfd5c7 100644
--- a/libglusterfs/src/inode.c
+++ b/libglusterfs/src/inode.c
@@ -31,7 +31,7 @@
                 list_for_each_entry (inode, head, list) {               \
                         gf_proc_dump_build_key(key_buf, key_prefix,     \
                                                "%s.%d",list_type, i++); \
-                        gf_proc_dump_add_section(key_buf);              \
+                        gf_proc_dump_add_section("%s", key_buf);        \
                         inode_dump(inode, key);                         \
                 }                                                       \
         }
@@ -2413,7 +2413,7 @@ inode_table_dump (inode_table_t *itable,
         }
 
         gf_proc_dump_build_key(key, prefix, "hashsize");
-        gf_proc_dump_write(key, "%d", itable->hashsize);
+        gf_proc_dump_write(key, "%" GF_PRI_SIZET, itable->hashsize);
         gf_proc_dump_build_key(key, prefix, "name");
         gf_proc_dump_write(key, "%s", itable->name);
 
diff --git a/libglusterfs/src/iobuf.c b/libglusterfs/src/iobuf.c
index 8682420..c9e0ff3 100644
--- a/libglusterfs/src/iobuf.c
+++ b/libglusterfs/src/iobuf.c
@@ -1143,7 +1143,7 @@ iobuf_info_dump (struct iobuf *iobuf, co
         UNLOCK(&iobuf->lock);
 
         gf_proc_dump_build_key(key, key_prefix,"ref");
-        gf_proc_dump_write(key, "%d", my_iobuf.ref);
+        gf_proc_dump_write(key, "%" GF_PRI_ATOMIC, GF_ATOMIC_GET(my_iobuf.ref));
         gf_proc_dump_build_key(key, key_prefix,"ptr");
         gf_proc_dump_write(key, "%p", my_iobuf.ptr);
 
@@ -1169,12 +1169,12 @@ iobuf_arena_info_dump (struct iobuf_aren
         gf_proc_dump_build_key(key, key_prefix, "alloc_cnt");
         gf_proc_dump_write(key, "%"PRIu64, iobuf_arena->alloc_cnt);
         gf_proc_dump_build_key(key, key_prefix, "max_active");
-        gf_proc_dump_write(key, "%"PRIu64, iobuf_arena->max_active);
+        gf_proc_dump_write(key, "%d", iobuf_arena->max_active);
         gf_proc_dump_build_key(key, key_prefix, "page_size");
-        gf_proc_dump_write(key, "%"PRIu64, iobuf_arena->page_size);
+        gf_proc_dump_write(key, "%" GF_PRI_SIZET, iobuf_arena->page_size);
         list_for_each_entry (trav, &iobuf_arena->active.list, list) {
                 gf_proc_dump_build_key(key, key_prefix,"active_iobuf.%d", i++);
-                gf_proc_dump_add_section(key);
+                gf_proc_dump_add_section("%s", key);
                 iobuf_info_dump(trav, key);
         }
 
@@ -1202,9 +1202,9 @@ iobuf_stats_dump (struct iobuf_pool *iob
         }
         gf_proc_dump_add_section("iobuf.global");
         gf_proc_dump_write("iobuf_pool","%p", iobuf_pool);
-        gf_proc_dump_write("iobuf_pool.default_page_size", "%d",
+        gf_proc_dump_write("iobuf_pool.default_page_size", "%" GF_PRI_SIZET,
                                                 iobuf_pool->default_page_size);
-        gf_proc_dump_write("iobuf_pool.arena_size", "%d",
+        gf_proc_dump_write("iobuf_pool.arena_size", "%" GF_PRI_SIZET,
                            iobuf_pool->arena_size);
         gf_proc_dump_write("iobuf_pool.arena_cnt", "%d",
                            iobuf_pool->arena_cnt);
@@ -1215,21 +1215,21 @@ iobuf_stats_dump (struct iobuf_pool *iob
                 list_for_each_entry (trav, &iobuf_pool->arenas[j], list) {
                         snprintf(msg, sizeof(msg),
                                  "arena.%d", i);
-                        gf_proc_dump_add_section(msg);
+                        gf_proc_dump_add_section("%s", msg);
                         iobuf_arena_info_dump(trav,msg);
                         i++;
                 }
                 list_for_each_entry (trav, &iobuf_pool->purge[j], list) {
                         snprintf(msg, sizeof(msg),
                                  "purge.%d", i);
-                        gf_proc_dump_add_section(msg);
+                        gf_proc_dump_add_section("%s", msg);
                         iobuf_arena_info_dump(trav,msg);
                         i++;
                 }
                 list_for_each_entry (trav, &iobuf_pool->filled[j], list) {
                         snprintf(msg, sizeof(msg),
                                  "filled.%d", i);
-                        gf_proc_dump_add_section(msg);
+                        gf_proc_dump_add_section("%s", msg);
                         iobuf_arena_info_dump(trav,msg);
                         i++;
                 }
diff --git a/libglusterfs/src/latency.c b/libglusterfs/src/latency.c
index 2dc2a31..afbb6dc 100644
--- a/libglusterfs/src/latency.c
+++ b/libglusterfs/src/latency.c
@@ -169,7 +169,7 @@ gf_proc_dump_latency_info (xlator_t *xl)
         int i;
 
         snprintf (key_prefix, GF_DUMP_MAX_BUF_LEN, "%s.latency", xl->name);
-        gf_proc_dump_add_section (key_prefix);
+        gf_proc_dump_add_section ("%s", key_prefix);
 
         for (i = 0; i < GF_FOP_MAXVALUE; i++) {
                 gf_proc_dump_build_key (key, key_prefix, "%s",
diff --git a/libglusterfs/src/logging.h b/libglusterfs/src/logging.h
index f229448..859050d 100644
--- a/libglusterfs/src/logging.h
+++ b/libglusterfs/src/logging.h
@@ -171,7 +171,8 @@ int _gf_log_callingfn (const char *domai
                        const char *fmt, ...)
                        __attribute__ ((__format__ (__printf__, 6, 7)));
 
-int _gf_log_eh (const char *function, const char *fmt, ...);
+int _gf_log_eh(const char *function, const char *fmt, ...)
+    __attribute__((__format__(__printf__, 2, 3)));
 
 
 
diff --git a/libglusterfs/src/mem-pool.h b/libglusterfs/src/mem-pool.h
index af6b4de..118170f 100644
--- a/libglusterfs/src/mem-pool.h
+++ b/libglusterfs/src/mem-pool.h
@@ -86,7 +86,8 @@ int
 gf_vasprintf (char **string_ptr, const char *format, va_list arg);
 
 int
-gf_asprintf (char **string_ptr, const char *format, ...);
+gf_asprintf(char **string_ptr, const char *format, ...)
+    __attribute__((__format__(__printf__, 2, 3)));
 
 void
 __gf_free (void *ptr);
diff --git a/libglusterfs/src/run.h b/libglusterfs/src/run.h
index dd19972..76af95f 100644
--- a/libglusterfs/src/run.h
+++ b/libglusterfs/src/run.h
@@ -76,8 +76,8 @@ void runner_add_args (runner_t *runner,
  * @param runner pointer to runner_t instance
  * @param format printf style format specifier
  */
-void runner_argprintf (runner_t *runner, const char *format, ...);
-
+void runner_argprintf(runner_t *runner, const char *format, ...)
+    __attribute__((__format__(__printf__, 2, 3)));
 /**
  * log a message about the command to be run.
  *
diff --git a/libglusterfs/src/stack.c b/libglusterfs/src/stack.c
index c8a3b79..4b5d13c 100644
--- a/libglusterfs/src/stack.c
+++ b/libglusterfs/src/stack.c
@@ -124,7 +124,7 @@ gf_proc_dump_call_frame (call_frame_t *c
 out:
         if (ret) {
                 gf_proc_dump_write("Unable to dump the frame information",
-                                   "(Lock acquisition failed) %p", my_frame);
+                                   "(Lock acquisition failed)");
                 return;
         }
 }
@@ -163,7 +163,7 @@ gf_proc_dump_call_stack (call_stack_t *c
         gf_proc_dump_write("uid", "%d", call_stack->uid);
         gf_proc_dump_write("gid", "%d", call_stack->gid);
         gf_proc_dump_write("pid", "%d", call_stack->pid);
-        gf_proc_dump_write("unique", "%Ld", call_stack->unique);
+        gf_proc_dump_write("unique", "%" PRIu64, call_stack->unique);
         gf_proc_dump_write("lk-owner", "%s", lkowner_utoa (&call_stack->lk_owner));
 
         if (call_stack->type == GF_OP_TYPE_FOP)
@@ -202,7 +202,7 @@ gf_proc_dump_pending_frames (call_pool_t
         gf_proc_dump_add_section("global.callpool");
         section_added = _gf_true;
         gf_proc_dump_write("callpool_address","%p", call_pool);
-        gf_proc_dump_write("callpool.cnt","%d", call_pool->cnt);
+        gf_proc_dump_write("callpool.cnt", "%" PRId64, call_pool->cnt);
 
 
         list_for_each_entry (trav, &call_pool->all_frames, all_frames) {
diff --git a/libglusterfs/src/statedump.c b/libglusterfs/src/statedump.c
index d0701e5..0f4a710 100644
--- a/libglusterfs/src/statedump.c
+++ b/libglusterfs/src/statedump.c
@@ -275,15 +275,14 @@ gf_proc_dump_xlator_mem_info_only_in_use
                 gf_proc_dump_add_section ("%s.%s - usage-type %d", xl->type,
                                           xl->name,i);
 
-                gf_proc_dump_write ("size", "%u",
-                                    xl->mem_acct->rec[i].size);
-                gf_proc_dump_write ("max_size", "%u",
+                gf_proc_dump_write ("size", "%" PRIu64, xl->mem_acct->rec[i].size);
+                gf_proc_dump_write ("max_size", "%" PRIu64,
                                     xl->mem_acct->rec[i].max_size);
                 gf_proc_dump_write ("num_allocs", "%u",
                                     xl->mem_acct->rec[i].num_allocs);
                 gf_proc_dump_write ("max_num_allocs", "%u",
                                     xl->mem_acct->rec[i].max_num_allocs);
-                gf_proc_dump_write ("total_allocs", "%u",
+                gf_proc_dump_write ("total_allocs", "%" PRIu64,
                                     xl->mem_acct->rec[i].total_allocs);
         }
 
diff --git a/libglusterfs/src/statedump.h b/libglusterfs/src/statedump.h
index 6c32c16..af65304 100644
--- a/libglusterfs/src/statedump.h
+++ b/libglusterfs/src/statedump.h
@@ -73,9 +73,13 @@ void gf_proc_dump_cleanup(void);
 
 void gf_proc_dump_info(int signum, glusterfs_ctx_t *ctx);
 
-int gf_proc_dump_add_section(char *key,...);
+int
+gf_proc_dump_add_section(char *key, ...)
+    __attribute__((__format__(__printf__, 1, 2)));
 
-int gf_proc_dump_write(char *key, char *value,...);
+int
+gf_proc_dump_write(char *key, char *value, ...)
+    __attribute__((__format__(__printf__, 2, 3)));
 
 void inode_table_dump(inode_table_t *itable, char *prefix);
 
diff --git a/rpc/rpc-lib/src/rpc-drc.c b/rpc/rpc-lib/src/rpc-drc.c
index ff983b2..5001377 100644
--- a/rpc/rpc-lib/src/rpc-drc.c
+++ b/rpc/rpc-lib/src/rpc-drc.c
@@ -565,10 +565,10 @@ rpcsvc_drc_priv (rpcsvc_drc_globals_t *d
         gf_proc_dump_write (key, "%d", drc->lru_factor);
 
         gf_proc_dump_build_key (key, "drc", "duplicate_request_count");
-        gf_proc_dump_write (key, "%d", drc->cache_hits);
+        gf_proc_dump_write (key, "%" PRIu64, drc->cache_hits);
 
         gf_proc_dump_build_key (key, "drc", "in_transit_duplicate_requests");
-        gf_proc_dump_write (key, "%d", drc->intransit_hits);
+        gf_proc_dump_write (key, "%" PRIu64, drc->intransit_hits);
 
         list_for_each_entry (client, &drc->clients_head, client_list) {
                 gf_proc_dump_build_key (key, "client", "%d.ip-address", i);
diff --git a/xlators/cluster/afr/src/afr-common.c b/xlators/cluster/afr/src/afr-common.c
index 3a62df3..c27159a 100644
--- a/xlators/cluster/afr/src/afr-common.c
+++ b/xlators/cluster/afr/src/afr-common.c
@@ -4545,7 +4545,7 @@ afr_priv_dump (xlator_t *this)
 
         GF_ASSERT (priv);
         snprintf(key_prefix, GF_DUMP_MAX_BUF_LEN, "%s.%s", this->type, this->name);
-        gf_proc_dump_add_section(key_prefix);
+        gf_proc_dump_add_section("%s", key_prefix);
         gf_proc_dump_write("child_count", "%u", priv->child_count);
         for (i = 0; i < priv->child_count; i++) {
                 sprintf (key, "child_up[%d]", i);
diff --git a/xlators/cluster/dht/src/dht-shared.c b/xlators/cluster/dht/src/dht-shared.c
index 8cccbc8..0a7aa15 100644
--- a/xlators/cluster/dht/src/dht-shared.c
+++ b/xlators/cluster/dht/src/dht-shared.c
@@ -179,8 +179,7 @@ dht_priv_dump (xlator_t *this)
                                             conf->du_stats[i].avail_inodes);
 
                         snprintf (key, sizeof (key), "du_stats[%d].log", i);
-                        gf_proc_dump_write (key, "%lu",
-                                            conf->du_stats[i].log);
+                        gf_proc_dump_write(key, "%" PRIu32, conf->du_stats[i].log);
                 }
         }
 
diff --git a/xlators/cluster/ec/src/ec.c b/xlators/cluster/ec/src/ec.c
index 00c374e..b56dd9a 100644
--- a/xlators/cluster/ec/src/ec.c
+++ b/xlators/cluster/ec/src/ec.c
@@ -1301,7 +1301,7 @@ int32_t ec_dump_private(xlator_t *this)
     GF_ASSERT(ec);
 
     snprintf(key_prefix, GF_DUMP_MAX_BUF_LEN, "%s.%s", this->type, this->name);
-    gf_proc_dump_add_section(key_prefix);
+    gf_proc_dump_add_section("%s", key_prefix);
     gf_proc_dump_write("nodes", "%u", ec->nodes);
     gf_proc_dump_write("redundancy", "%u", ec->redundancy);
     gf_proc_dump_write("fragment_size", "%u", ec->fragment_size);
diff --git a/xlators/debug/trace/src/trace.c b/xlators/debug/trace/src/trace.c
index ad8ca08..0aca3a9 100644
--- a/xlators/debug/trace/src/trace.c
+++ b/xlators/debug/trace/src/trace.c
@@ -68,7 +68,7 @@ dump_history_trace (circular_buffer_t *c
                   ".%"GF_PRI_SUSECONDS, cb->tv.tv_usec);
         gf_proc_dump_write ("TIME", "%s", timestr);
 
-        gf_proc_dump_write ("FOP", "%s\n", cb->data);
+        gf_proc_dump_write("FOP", "%s\n", (char *)cb->data);
 
         return 0;
 }
@@ -3014,7 +3014,7 @@ trace_dump_history (xlator_t *this)
         if (conf && conf->log_history == _gf_true) {
                 gf_proc_dump_build_key (key_prefix, "xlator.debug.trace",
                                         "history");
-                gf_proc_dump_add_section (key_prefix);
+                gf_proc_dump_add_section ("%s", key_prefix);
                 eh_dump (this->history, NULL, dump_history_trace);
         }
         ret = 0;
diff --git a/xlators/features/barrier/src/barrier.c b/xlators/features/barrier/src/barrier.c
index edecae1..1c5c5ff 100644
--- a/xlators/features/barrier/src/barrier.c
+++ b/xlators/features/barrier/src/barrier.c
@@ -713,7 +713,7 @@ __barrier_dump_queue (barrier_priv_t *pr
 
         list_for_each_entry (stub, &priv->queue, list) {
                 snprintf (key, sizeof (key), "stub.%d", i++);
-                gf_proc_dump_add_section (key);
+                gf_proc_dump_add_section ("%s", key);
                 barrier_dump_stub(stub, key);
         }
 
@@ -735,7 +735,7 @@ barrier_dump_priv (xlator_t *this)
                 return 0;
 
         gf_proc_dump_build_key (key, "xlator.features.barrier", "priv");
-        gf_proc_dump_add_section (key);
+        gf_proc_dump_add_section ("%s", key);
 
         LOCK (&priv->lock);
         {
diff --git a/xlators/features/gfid-access/src/gfid-access.c b/xlators/features/gfid-access/src/gfid-access.c
index 68768ee..0cf7870 100644
--- a/xlators/features/gfid-access/src/gfid-access.c
+++ b/xlators/features/gfid-access/src/gfid-access.c
@@ -1382,7 +1382,7 @@ ga_dump_inodectx (xlator_t *this, inode_
         if (ret == 0) {
                 tmp_inode = (void*) value;
                 gf_proc_dump_build_key (key_prefix, this->name, "inode");
-                gf_proc_dump_add_section (key_prefix);
+                gf_proc_dump_add_section ("%s", key_prefix);
                 gf_proc_dump_write ("real-gfid", "%s",
                                     uuid_utoa (tmp_inode->gfid));
         }
diff --git a/xlators/features/locks/src/posix.c b/xlators/features/locks/src/posix.c
index f08a22d..17f733a 100644
--- a/xlators/features/locks/src/posix.c
+++ b/xlators/features/locks/src/posix.c
@@ -3257,7 +3257,7 @@ __dump_entrylks (pl_inode_t *pl_inode)
                                           blocked, granted);
                         }
 
-                        gf_proc_dump_write(key, tmp);
+                        gf_proc_dump_write(key, "%s", tmp);
 
                         count++;
                 }
@@ -3278,7 +3278,7 @@ __dump_entrylks (pl_inode_t *pl_inode)
                                   lkowner_utoa (&lock->owner), lock->client,
                                   lock->connection_id, blocked);
 
-                        gf_proc_dump_write(key, tmp);
+                        gf_proc_dump_write(key, "%s", tmp);
 
                         count++;
                 }
@@ -3329,7 +3329,7 @@ __dump_inodelks (pl_inode_t *pl_inode)
                                       &lock->granted_time.tv_sec,
                                       &lock->blkd_time.tv_sec,
                                       _gf_true);
-                        gf_proc_dump_write(key, tmp);
+                        gf_proc_dump_write(key, "%s", tmp);
 
                         count++;
                 }
@@ -3345,7 +3345,7 @@ __dump_inodelks (pl_inode_t *pl_inode)
                                       lock->client, lock->connection_id,
                                       0, &lock->blkd_time.tv_sec,
                                       _gf_false);
-                        gf_proc_dump_write(key, tmp);
+                        gf_proc_dump_write(key, "%s", tmp);
 
                         count++;
                 }
@@ -3386,7 +3386,7 @@ __dump_posixlks (pl_inode_t *pl_inode)
                             &lock->owner, lock->client, NULL,
                             &lock->granted_time.tv_sec, &lock->blkd_time.tv_sec,
                             (lock->blocked)? _gf_false: _gf_true);
-              gf_proc_dump_write(key, tmp);
+              gf_proc_dump_write(key, "%s", tmp);
 
               count++;
         }
diff --git a/xlators/features/quota/src/quota.c b/xlators/features/quota/src/quota.c
index 0b81e37..eb461f4 100644
--- a/xlators/features/quota/src/quota.c
+++ b/xlators/features/quota/src/quota.c
@@ -5187,7 +5187,7 @@ quota_priv_dump (xlator_t *this)
 
         priv = this->private;
 
-        gf_proc_dump_add_section ("xlators.features.quota.priv", this->name);
+        gf_proc_dump_add_section ("xlators.features.quota.priv");
 
         ret = TRY_LOCK (&priv->lock);
         if (ret)
diff --git a/xlators/features/shard/src/shard.c b/xlators/features/shard/src/shard.c
index 79804bd..b632368 100644
--- a/xlators/features/shard/src/shard.c
+++ b/xlators/features/shard/src/shard.c
@@ -5038,12 +5038,12 @@ shard_priv_dump (xlator_t *this)
 
         snprintf (key_prefix, GF_DUMP_MAX_BUF_LEN, "%s.%s", this->type,
                   this->name);
-        gf_proc_dump_add_section (key_prefix);
+        gf_proc_dump_add_section ("%s", key_prefix);
         gf_proc_dump_write ("shard-block-size", "%s",
                             gf_uint64_2human_readable (priv->block_size));
         gf_proc_dump_write ("inode-count", "%d", priv->inode_count);
         gf_proc_dump_write ("ilist_head", "%p", &priv->ilist_head);
-        gf_proc_dump_write ("lru-max-limit", "%d", SHARD_MAX_INODES);
+        gf_proc_dump_write ("lru-max-limit", "%" PRIu64, SHARD_MAX_INODES);
 
         return 0;
 }
diff --git a/xlators/mgmt/glusterd/src/glusterd-quota.c b/xlators/mgmt/glusterd/src/glusterd-quota.c
index 014d3d5..fd500ca 100644
--- a/xlators/mgmt/glusterd/src/glusterd-quota.c
+++ b/xlators/mgmt/glusterd/src/glusterd-quota.c
@@ -2078,7 +2078,7 @@ glusterd_op_stage_quota (dict_t *dict, c
                         if (errno == ERANGE || hard_limit < 0)
                                 gf_asprintf (op_errstr, "Hard-limit "
                                         "value out of range (0 - %"PRId64
-                                        "): %s", hard_limit_str);
+                                        "): %s", hard_limit, hard_limit_str);
                         else
                                 gf_msg (this->name, GF_LOG_ERROR, errno,
                                         GD_MSG_CONVERSION_FAILED,
diff --git a/xlators/mgmt/glusterd/src/glusterd-rebalance.c b/xlators/mgmt/glusterd/src/glusterd-rebalance.c
index 3046cc4..f90d3de 100644
--- a/xlators/mgmt/glusterd/src/glusterd-rebalance.c
+++ b/xlators/mgmt/glusterd/src/glusterd-rebalance.c
@@ -309,7 +309,7 @@ glusterd_handle_defrag_start (glusterd_v
         runner_add_arg (&runner, "--pid-file");
         runner_argprintf (&runner, "%s",pidfile);
         runner_add_arg (&runner, "-l");
-        runner_argprintf (&runner, logfile);
+        runner_argprintf (&runner, "%s", logfile);
         if (volinfo->memory_accounting)
                 runner_add_arg (&runner, "--mem-accounting");
 
diff --git a/xlators/mgmt/glusterd/src/glusterd-statedump.c b/xlators/mgmt/glusterd/src/glusterd-statedump.c
index 1d10c62..8c2786c 100644
--- a/xlators/mgmt/glusterd/src/glusterd-statedump.c
+++ b/xlators/mgmt/glusterd/src/glusterd-statedump.c
@@ -197,7 +197,7 @@ glusterd_dump_priv (xlator_t *this)
                 return 0;
 
         gf_proc_dump_build_key (key, "xlator.glusterd", "priv");
-        gf_proc_dump_add_section (key);
+        gf_proc_dump_add_section ("%s", key);
 
         pthread_mutex_lock (&priv->mutex);
         {
diff --git a/xlators/mount/fuse/src/fuse-bridge.c b/xlators/mount/fuse/src/fuse-bridge.c
index d34f77c..75b91a4 100644
--- a/xlators/mount/fuse/src/fuse-bridge.c
+++ b/xlators/mount/fuse/src/fuse-bridge.c
@@ -5197,8 +5197,7 @@ fuse_priv_dump (xlator_t  *this)
                             private->proto_minor);
         gf_proc_dump_write("volfile", "%s",
                             private->volfile?private->volfile:"None");
-        gf_proc_dump_write("volfile_size", "%d",
-                            private->volfile_size);
+        gf_proc_dump_write("volfile_size", "%" GF_PRI_SIZET, private->volfile_size);
         gf_proc_dump_write("mount_point", "%s",
                             private->mount_point);
         gf_proc_dump_write("iobuf", "%u",
@@ -5233,7 +5232,7 @@ fuse_history_dump (xlator_t *this)
 
         gf_proc_dump_build_key (key_prefix, "xlator.mount.fuse",
                                 "history");
-        gf_proc_dump_add_section (key_prefix);
+        gf_proc_dump_add_section ("%s", key_prefix);
         eh_dump (this->history, NULL, dump_history_fuse);
 
         ret = 0;
@@ -5252,7 +5251,7 @@ dump_history_fuse (circular_buffer_t *cb
                   ".%"GF_PRI_SUSECONDS, cb->tv.tv_usec);
         gf_proc_dump_write ("TIME", "%s", timestr);
 
-        gf_proc_dump_write ("message", "%s\n", cb->data);
+        gf_proc_dump_write ("message", "%s\n", (char *)cb->data);
 
         return 0;
 }
diff --git a/xlators/performance/io-cache/src/io-cache.c b/xlators/performance/io-cache/src/io-cache.c
index 6ffad7d..380ba87 100644
--- a/xlators/performance/io-cache/src/io-cache.c
+++ b/xlators/performance/io-cache/src/io-cache.c
@@ -1893,7 +1893,7 @@ __ioc_page_dump (ioc_page_t *page, char
                 goto out;
         {
                 gf_proc_dump_write ("offset", "%"PRId64, page->offset);
-                gf_proc_dump_write ("size", "%"PRId64, page->size);
+                gf_proc_dump_write ("size", "%"GF_PRI_SIZET, page->size);
                 gf_proc_dump_write ("dirty", "%s", page->dirty ? "yes" : "no");
                 gf_proc_dump_write ("ready", "%s", page->ready ? "yes" : "no");
                 ioc_page_waitq_dump (page, prefix);
@@ -1983,7 +1983,7 @@ ioc_inode_dump (xlator_t *this, inode_t
                 if (gf_uuid_is_null (ioc_inode->inode->gfid))
                         goto unlock;
 
-                gf_proc_dump_add_section (key_prefix);
+                gf_proc_dump_add_section ("%s", key_prefix);
                 section_added = _gf_true;
 
                 __inode_path (ioc_inode->inode, NULL, &path);
@@ -2006,7 +2006,7 @@ unlock:
 out:
         if (ret && ioc_inode) {
                 if (section_added == _gf_false)
-                        gf_proc_dump_add_section (key_prefix);
+                        gf_proc_dump_add_section ("%s", key_prefix);
                 gf_proc_dump_write ("Unable to print the status of ioc_inode",
                                     "(Lock acquisition failed) %s",
                                     uuid_utoa (inode->gfid));
@@ -2028,7 +2028,7 @@ ioc_priv_dump (xlator_t *this)
         priv = this->private;
 
         gf_proc_dump_build_key (key_prefix, "io-cache", "priv");
-        gf_proc_dump_add_section (key_prefix);
+        gf_proc_dump_add_section ("%s", key_prefix);
         add_section = _gf_true;
 
         ret = pthread_mutex_trylock (&priv->table_lock);
@@ -2040,8 +2040,8 @@ ioc_priv_dump (xlator_t *this)
                 gf_proc_dump_write ("cache_used", "%ld", priv->cache_used);
                 gf_proc_dump_write ("inode_count", "%u", priv->inode_count);
                 gf_proc_dump_write ("cache_timeout", "%u", priv->cache_timeout);
-                gf_proc_dump_write ("min-file-size", "%u", priv->min_file_size);
-                gf_proc_dump_write ("max-file-size", "%u", priv->max_file_size);
+                gf_proc_dump_write("min-file-size", "%" PRIu64, priv->min_file_size);
+                gf_proc_dump_write("max-file-size", "%" PRIu64, priv->max_file_size);
         }
         pthread_mutex_unlock (&priv->table_lock);
 out:
@@ -2049,7 +2049,7 @@ out:
                 if (!add_section) {
                         gf_proc_dump_build_key (key_prefix, "xlator."
                                                 "performance.io-cache", "priv");
-                        gf_proc_dump_add_section (key_prefix);
+                        gf_proc_dump_add_section ("%s", key_prefix);
                 }
                 gf_proc_dump_write ("Unable to dump the state of private "
                                     "structure of io-cache xlator", "(Lock "
diff --git a/xlators/performance/io-threads/src/io-threads.c b/xlators/performance/io-threads/src/io-threads.c
index 7f1a346..80d42de 100644
--- a/xlators/performance/io-threads/src/io-threads.c
+++ b/xlators/performance/io-threads/src/io-threads.c
@@ -904,7 +904,7 @@ iot_priv_dump (xlator_t *this)
         snprintf (key_prefix, GF_DUMP_MAX_BUF_LEN, "%s.%s", this->type,
                   this->name);
 
-        gf_proc_dump_add_section(key_prefix);
+        gf_proc_dump_add_section("%s", key_prefix);
 
         gf_proc_dump_write("maximum_threads_count", "%d", conf->max_count);
         gf_proc_dump_write("current_threads_count", "%d", conf->curr_count);
diff --git a/xlators/performance/md-cache/src/md-cache.c b/xlators/performance/md-cache/src/md-cache.c
index 7006669..bf4b639 100644
--- a/xlators/performance/md-cache/src/md-cache.c
+++ b/xlators/performance/md-cache/src/md-cache.c
@@ -2584,7 +2584,7 @@ mdc_priv_dump (xlator_t *this)
         conf = this->private;
 
         snprintf(key_prefix, GF_DUMP_MAX_BUF_LEN, "%s.%s", this->type, this->name);
-        gf_proc_dump_add_section(key_prefix);
+        gf_proc_dump_add_section("%s", key_prefix);
 
         gf_proc_dump_write("stat_hit_count", "%"PRId64,
                            conf->mdc_counter.stat_hit);
diff --git a/xlators/performance/nl-cache/src/nl-cache-helper.c b/xlators/performance/nl-cache/src/nl-cache-helper.c
index f2954a8..279c023 100644
--- a/xlators/performance/nl-cache/src/nl-cache-helper.c
+++ b/xlators/performance/nl-cache/src/nl-cache-helper.c
@@ -1102,7 +1102,7 @@ nlc_dump_inodectx (xlator_t *this, inode
                 gf_proc_dump_build_key (key_prefix,
                                         "xlator.performance.nl-cache",
                                         "nlc_inode");
-                gf_proc_dump_add_section (key_prefix);
+                gf_proc_dump_add_section ("%s", key_prefix);
 
                 __inode_path (inode, NULL, &path);
                 if (path != NULL) {
@@ -1117,13 +1117,13 @@ nlc_dump_inodectx (xlator_t *this, inode
 
                 gf_proc_dump_write ("state", "%"PRIu64, nlc_ctx->state);
                 gf_proc_dump_write ("timer", "%p", nlc_ctx->timer);
-                gf_proc_dump_write ("cache-time", "%lld", nlc_ctx->cache_time);
+                gf_proc_dump_write ("cache-time", "%" GF_PRI_TIME, nlc_ctx->cache_time);
                 gf_proc_dump_write ("cache-size", "%zu", nlc_ctx->cache_size);
                 gf_proc_dump_write ("refd-inodes", "%"PRIu64, nlc_ctx->refd_inodes);
 
                 if (IS_PE_VALID (nlc_ctx->state))
                         list_for_each_entry_safe (pe, tmp, &nlc_ctx->pe, list) {
-                                gf_proc_dump_write ("pe", "%p, %s", pe,
+                                gf_proc_dump_write ("pe", "%p, %p, %s", pe,
                                                     pe->inode, pe->name);
                         }
 
diff --git a/xlators/performance/nl-cache/src/nl-cache.c b/xlators/performance/nl-cache/src/nl-cache.c
index efa54ee..02d6df5 100644
--- a/xlators/performance/nl-cache/src/nl-cache.c
+++ b/xlators/performance/nl-cache/src/nl-cache.c
@@ -596,7 +596,7 @@ nlc_priv_dump (xlator_t *this)
         conf = this->private;
 
         snprintf(key_prefix, GF_DUMP_MAX_BUF_LEN, "%s.%s", this->type, this->name);
-        gf_proc_dump_add_section(key_prefix);
+        gf_proc_dump_add_section("%s", key_prefix);
 
         gf_proc_dump_write("negative_lookup_hit_count", "%"PRId64,
                            conf->nlc_counter.nlc_hit.cnt);
diff --git a/xlators/performance/open-behind/src/open-behind.c b/xlators/performance/open-behind/src/open-behind.c
index 8021fd0..6164b3b 100644
--- a/xlators/performance/open-behind/src/open-behind.c
+++ b/xlators/performance/open-behind/src/open-behind.c
@@ -839,7 +839,7 @@ ob_priv_dump (xlator_t *this)
         gf_proc_dump_build_key (key_prefix, "xlator.performance.open-behind",
                                 "priv");
 
-        gf_proc_dump_add_section (key_prefix);
+        gf_proc_dump_add_section ("%s", key_prefix);
 
         gf_proc_dump_write ("use_anonymous_fd", "%d", conf->use_anonymous_fd);
 
@@ -868,14 +868,14 @@ ob_fdctx_dump (xlator_t *this, fd_t *fd)
 
         gf_proc_dump_build_key (key_prefix, "xlator.performance.open-behind",
                                 "file");
-        gf_proc_dump_add_section (key_prefix);
+        gf_proc_dump_add_section ("%s", key_prefix);
 
         gf_proc_dump_write ("fd", "%p", fd);
 
         gf_proc_dump_write ("open_frame", "%p", ob_fd->open_frame);
 
         if (ob_fd->open_frame)
-                gf_proc_dump_write ("open_frame.root.unique", "%p",
+                gf_proc_dump_write ("open_frame.root.unique", "%" PRIu64,
                                     ob_fd->open_frame->root->unique);
 
 	gf_proc_dump_write ("loc.path", "%s", ob_fd->loc.path);
diff --git a/xlators/performance/quick-read/src/quick-read.c b/xlators/performance/quick-read/src/quick-read.c
index 2173460..ea61a2e 100644
--- a/xlators/performance/quick-read/src/quick-read.c
+++ b/xlators/performance/quick-read/src/quick-read.c
@@ -710,7 +710,7 @@ qr_inodectx_dump (xlator_t *this, inode_
 
         gf_proc_dump_build_key (key_prefix, "xlator.performance.quick-read",
                                 "inodectx");
-        gf_proc_dump_add_section (key_prefix);
+        gf_proc_dump_add_section ("%s", key_prefix);
 
         gf_proc_dump_write ("entire-file-cached", "%s", qr_inode->data ? "yes" : "no");
 
@@ -756,9 +756,9 @@ qr_priv_dump (xlator_t *this)
         gf_proc_dump_build_key (key_prefix, "xlator.performance.quick-read",
                                 "priv");
 
-        gf_proc_dump_add_section (key_prefix);
+        gf_proc_dump_add_section ("%s", key_prefix);
 
-        gf_proc_dump_write ("max_file_size", "%d", conf->max_file_size);
+        gf_proc_dump_write ("max_file_size", "%" PRIu64, conf->max_file_size);
         gf_proc_dump_write ("cache_timeout", "%d", conf->cache_timeout);
 
         if (!table) {
@@ -773,7 +773,7 @@ qr_priv_dump (xlator_t *this)
         }
 
         gf_proc_dump_write ("total_files_cached", "%d", file_count);
-        gf_proc_dump_write ("total_cache_used", "%d", total_size);
+        gf_proc_dump_write("total_cache_used", "%" PRIu64, total_size);
 
 out:
         return 0;
diff --git a/xlators/performance/read-ahead/src/read-ahead.c b/xlators/performance/read-ahead/src/read-ahead.c
index 2fdb564..c62bd1b 100644
--- a/xlators/performance/read-ahead/src/read-ahead.c
+++ b/xlators/performance/read-ahead/src/read-ahead.c
@@ -782,7 +782,7 @@ ra_page_dump (struct ra_page *page)
 
         gf_proc_dump_write ("offset", "%"PRId64, page->offset);
 
-        gf_proc_dump_write ("size", "%"PRId64, page->size);
+        gf_proc_dump_write ("size", "%"GF_PRI_SIZET, page->size);
 
         gf_proc_dump_write ("dirty", "%s", page->dirty ? "yes" : "no");
 
@@ -808,7 +808,6 @@ ra_fdctx_dump (xlator_t *this, fd_t *fd)
         int32_t       ret      = 0, i = 0;
         uint64_t      tmp_file = 0;
         char         *path     = NULL;
-        char          key[GF_DUMP_MAX_BUF_LEN]        = {0, };
         char          key_prefix[GF_DUMP_MAX_BUF_LEN] = {0, };
 
 	fd_ctx_get (fd, this, &tmp_file);
@@ -823,7 +822,7 @@ ra_fdctx_dump (xlator_t *this, fd_t *fd)
                                 "xlator.performance.read-ahead",
                                 "file");
 
-        gf_proc_dump_add_section (key_prefix);
+        gf_proc_dump_add_section ("%s", key_prefix);
 
         ret = __inode_path (fd->inode, NULL, &path);
         if (path != NULL) {
@@ -849,8 +848,7 @@ ra_fdctx_dump (xlator_t *this, fd_t *fd)
 
         for (page = file->pages.next; page != &file->pages;
              page = page->next) {
-                sprintf (key, "page[%d]", i);
-                gf_proc_dump_write (key, "%p", page[i++]);
+                gf_proc_dump_write ("page", "%d: %p", i++, (void *)page);
 		ra_page_dump (page);
         }
 
@@ -1068,14 +1066,14 @@ ra_priv_dump (xlator_t *this)
         gf_proc_dump_build_key (key_prefix, "xlator.performance.read-ahead",
                                 "priv");
 
-        gf_proc_dump_add_section (key_prefix);
+        gf_proc_dump_add_section ("%s", key_prefix);
         add_section = _gf_true;
 
         ret = pthread_mutex_trylock (&conf->conf_lock);
         if (ret)
                 goto out;
         {
-                gf_proc_dump_write ("page_size", "%d", conf->page_size);
+                gf_proc_dump_write ("page_size", "%" PRIu64, conf->page_size);
                 gf_proc_dump_write ("page_count", "%d", conf->page_count);
                 gf_proc_dump_write ("force_atime_update", "%d",
                                     conf->force_atime_update);
@@ -1086,7 +1084,7 @@ ra_priv_dump (xlator_t *this)
 out:
         if (ret && conf) {
                 if (add_section == _gf_false)
-                        gf_proc_dump_add_section (key_prefix);
+                        gf_proc_dump_add_section ("%s", key_prefix);
 
                 gf_proc_dump_write ("Unable to dump priv",
                                     "(Lock acquisition failed) %s", this->name);
diff --git a/xlators/performance/write-behind/src/write-behind.c b/xlators/performance/write-behind/src/write-behind.c
index 473c8e9..b46a42f 100644
--- a/xlators/performance/write-behind/src/write-behind.c
+++ b/xlators/performance/write-behind/src/write-behind.c
@@ -2766,10 +2766,10 @@ wb_priv_dump (xlator_t *this)
         gf_proc_dump_build_key (key_prefix, "xlator.performance.write-behind",
                                 "priv");
 
-        gf_proc_dump_add_section (key_prefix);
+        gf_proc_dump_add_section ("%s", key_prefix);
 
-        gf_proc_dump_write ("aggregate_size", "%d", conf->aggregate_size);
-        gf_proc_dump_write ("window_size", "%d", conf->window_size);
+        gf_proc_dump_write ("aggregate_size", "%" PRIu64, conf->aggregate_size);
+        gf_proc_dump_write ("window_size", "%" PRIu64, conf->window_size);
         gf_proc_dump_write ("flush_behind", "%d", conf->flush_behind);
         gf_proc_dump_write ("trickling_writes", "%d", conf->trickling_writes);
 
@@ -2790,7 +2790,7 @@ __wb_dump_requests (struct list_head *he
                 gf_proc_dump_build_key (key_prefix, key, "%s",
                                         (char *)gf_fop_list[req->fop]);
 
-                gf_proc_dump_add_section(key_prefix);
+                gf_proc_dump_add_section("%s", key_prefix);
 
                 gf_proc_dump_write ("unique", "%"PRIu64, req->unique);
 
@@ -2801,7 +2801,7 @@ __wb_dump_requests (struct list_head *he
 		else
 			gf_proc_dump_write ("wound", "no");
 
-                gf_proc_dump_write ("generation-number", "%d", req->gen);
+                gf_proc_dump_write ("generation-number", "%" PRIu64, req->gen);
 
                 gf_proc_dump_write ("req->op_ret", "%d", req->op_ret);
                 gf_proc_dump_write ("req->op_errno", "%d", req->op_errno);
@@ -2862,7 +2862,7 @@ wb_inode_dump (xlator_t *this, inode_t *
         gf_proc_dump_build_key (key_prefix, "xlator.performance.write-behind",
                                 "wb_inode");
 
-        gf_proc_dump_add_section (key_prefix);
+        gf_proc_dump_add_section ("%s", key_prefix);
 
         __inode_path (inode, NULL, &path);
         if (path != NULL) {
diff --git a/xlators/protocol/client/src/client.c b/xlators/protocol/client/src/client.c
index ffb0a6d..c5bf28d 100644
--- a/xlators/protocol/client/src/client.c
+++ b/xlators/protocol/client/src/client.c
@@ -2854,11 +2854,11 @@ client_priv_dump (xlator_t *this)
         gf_proc_dump_build_key(key_prefix, "xlator.protocol.client",
                                "%s.priv", this->name);
 
-        gf_proc_dump_add_section(key_prefix);
+        gf_proc_dump_add_section("%s", key_prefix);
 
         list_for_each_entry(tmp, &conf->saved_fds, sfd_pos) {
                 sprintf (key, "fd.%d.remote_fd", i);
-                gf_proc_dump_write(key, "%d", tmp->remote_fd);
+                gf_proc_dump_write(key, "%" PRId64, tmp->remote_fd);
                 client_fd_lk_ctx_dump (this, tmp->lk_ctx, i);
                 i++;
         }
diff --git a/xlators/protocol/server/src/server.c b/xlators/protocol/server/src/server.c
index 4ec6fe8..8416b42 100644
--- a/xlators/protocol/server/src/server.c
+++ b/xlators/protocol/server/src/server.c
@@ -309,7 +309,7 @@ server_priv (xlator_t *this)
                 return 0;
 
         gf_proc_dump_build_key (key, "xlator.protocol.server", "priv");
-        gf_proc_dump_add_section (key);
+        gf_proc_dump_add_section ("%s", key);
 
         ret = pthread_mutex_trylock (&conf->mutex);
         if (ret != 0)
--- a/xlators/storage/posix/src/posix.c
+++ b/xlators/storage/posix/src/posix.c
@@ -6511,7 +6511,7 @@ posix_priv (xlator_t *this)
 
         (void) snprintf(key_prefix, GF_DUMP_MAX_BUF_LEN, "%s.%s",
                         this->type, this->name);
-        gf_proc_dump_add_section(key_prefix);
+        gf_proc_dump_add_section("%s", key_prefix);
 
         if (!this)
                 return 0;
@@ -6523,8 +6523,8 @@ posix_priv (xlator_t *this)
 
         gf_proc_dump_write("base_path","%s", priv->base_path);
         gf_proc_dump_write("base_path_length","%d", priv->base_path_length);
-        gf_proc_dump_write("max_read","%d", priv->read_value);
-        gf_proc_dump_write("max_write","%d", priv->write_value);
+        gf_proc_dump_write("max_read", "%" PRId64, priv->read_value);
+        gf_proc_dump_write("max_write", "%" PRId64, priv->write_value);
         gf_proc_dump_write("nr_files","%ld", priv->nr_files);
 
         return 0;
-- 
1.7.9.5

